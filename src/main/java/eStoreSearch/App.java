/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eStoreSearch;

import java.util.*;
import java.io.*;

public class App {
    /**
     * Method takes in a String value and checks if it is a Number
     * Or a blank space (just pressed enter), will return true if it is number or blank
     * otherwise it will return false.
     * Uses parsing and catches any NumberFormatException
     * @param string String that is checked to be a num or blank
     * @return boolean, true or false
     */
    public static boolean isNum(String string) {
        if (string.equals("")) {
            return true;
        } 
        try{
            double num = Double.parseDouble(string);
        }catch (NumberFormatException e){
            return false;
        }
        return true;
    }

    /**
     * Method takes in a String value and checks if it is a Valid Year that ranges from 1000-9999
     * Uses the isNum method from above to make sure value is a number and additionally
     * Checks the length of string parameter to see if it fits the years wanted
     * @param string String that is checked to be a year value
     * @return boolean, true or false
     */
    public static boolean isYear(String string) {
        
        if (string.length() == 4 && isNum(string) == true){
            return true;
        } else if (string.equals("")){
            return true;
        } else if (string.length() != 4){
            return false;
        } else if (isNum(string) == false){
            return false;
        }

        return true;
    }
    public static void addYear(ArrayList<Product> products, ArrayList<Product> foundProducts,String year){
        int firstYear = 0;
        int secondYear = 0;
        int yearNum = 0;
        //year to year
        if (year.length() == 9) {

            firstYear = Integer.parseInt(year.substring(0, 4));
            secondYear = Integer.parseInt(year.substring(5,9));

            //2020-1900 or 1900-2020
            if (firstYear > secondYear){
                int temp = firstYear;
                firstYear = secondYear;
                secondYear = temp;
            }

            //Books

            for (int i = 0; i < products.size(); i++){

                if (products.get(i).getYear() >= firstYear && products.get(i).getYear() <= secondYear){
                    foundProducts.add(products.get(i));
                }
            }

            //other year cases
            //until year
        } else if (year.substring(0, 1).equals("-")){

            //everything less than year

            yearNum = Integer.parseInt(year.substring(1,5));

            for (int i=0; i < products.size(); i++){
                if (products.get(i).getYear() <= yearNum){
                    foundProducts.add(products.get(i));
                    
                }
            }
            
            //year onwards

        } else if (year.length() == 4){
            yearNum = Integer.parseInt(year);
            for (int i=0; i < products.size(); i++){
                if (yearNum == products.get(i).getYear()){
                    foundProducts.add(products.get(i));
                    
                }
            }
            
        } else if (year.substring(4, 5).equals("-")){

            //everything greater than year

            yearNum = Integer.parseInt(year.substring(0, 4));

            for (int i=0; i < products.size(); i++){
                if (products.get(i).getYear() >= yearNum){
                    foundProducts.add(products.get(i));
                    
                }
            }
            
        }
    }
    public static void removeYearIndex(ArrayList<Product> foundProducts,String year){
        int firstYear = 0;
        int secondYear = 0;
        int yearNum = 0;
        if (year.length() == 9) {

            //Books
            firstYear = Integer.parseInt(year.substring(0, 4));
            secondYear = Integer.parseInt(year.substring(5,9));

            //2020-1900 or 1900-2020
            if (firstYear > secondYear){
                int temp = firstYear;
                firstYear = secondYear;
                secondYear = temp;
            }

            for (int i = 0; i < foundProducts.size(); i++){

                if (!(foundProducts.get(i).getYear() >= firstYear && foundProducts.get(i).getYear() <= secondYear)){
                    foundProducts.remove(i);
                    i--;
                }
            }

            
            //other year cases
        } else if (year.substring(0, 1).equals("-")){

            //everything less than year

            yearNum = Integer.parseInt(year.substring(1,5));

            for (int i=0; i < foundProducts.size(); i++){
                if ((yearNum < foundProducts.get(i).getYear())){
                    foundProducts.remove(i);
                    i--;
                }
            }
            
        } else if (year.length() == 4){
            yearNum = Integer.parseInt(year);
            for (int i=0; i < foundProducts.size(); i++){
                if (!(yearNum == foundProducts.get(i).getYear())){
                    foundProducts.remove(i);
                    i--;
                }
            }
            
        } else if (year.substring(4, 5).equals("-")){

            //everything greater than year

            yearNum = Integer.parseInt(year.substring(0, 4));

            for (int i=0; i < foundProducts.size(); i++){
                if ((yearNum > foundProducts.get(i).getYear())){
                    foundProducts.remove(i);
                    i--;
                }
            }
            
        }
    }

    public static void removeIDIndex(ArrayList<Product> foundProducts,String productID){
        for (int i = 0; i<foundProducts.size(); i++){
            if ( !((productID).equals(foundProducts.get(i).getProductID())) ){
                foundProducts.remove(i);
                i--;
            }
        }
    }

    public static void addID(ArrayList<Product> products, ArrayList<Product> foundProducts,String productID){
        for (int i = 0; i<products.size(); i++){
            if ((productID).equals(products.get(i).getProductID())){
                foundProducts.add(products.get(i));
            }
        }
    }

    public static ArrayList<Product> products = new ArrayList<Product>(1);
    public static HashMap<String, ArrayList<Integer>> index = new HashMap<String, ArrayList<Integer>>();



    public static void main(String[] args) {

        //ADD GUI
        Window w = new Window();
        w.setVisible(true);

        //AddWindow aw = new AddWindow();
        //aw.setVisible(true);

    }  
}